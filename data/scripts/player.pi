//-----------------------------------------------------------------------------
// MAD MIX GAME Tribute Scripts
//
// This VR-Script is part of the bundle: com_gabe_madmixgame.app
// It is needed to execute in a MSXVR computer (https://msxvr.com)
// VR-Script Author: Alberto De Hoyo Nebot
// Development Team: Gabe Productions 

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
// See the GNU General Public License for more details:
// http://www.gnu.org/licenses/
//-----------------------------------------------------------------------------

namespace com_gabe_madmixgame;

class Player implements GL_Sprite
{
	constants:
		SPEED = 1;
		
	properties:
		mapper = null;
		pad = null;
		hud = null;
		cellX = 0;
		cellY = 0;
		dx = 0;
		dy = 0;
		useControls = true;
		mode = "";
		aniSpeed = 0.0f;
		aniPrefix = "";
		canTileCollide = true;
		canDead = true;
		canKillEnemies = 0; //1=Ghost, 2=LadyBug, 4=Troll
		canPickupBalls = true;
		canUnlockBalls = false;
		canUseHinges = false;
		canShot = false;
		canUseShooter = false;
		sndPickupBall = null; 
		sndPickupItem = null;
		sndItemWarning = null;
		sndDead = null;
		sndUnlockBall = null;
		sndShoot = null;
		sndDirection = null;
		curDir = "";
		itemTimer = -2;
		shotList = [];
		pressBut1 = false;
		spawnX = 0;
		spawnY = 0;
		
	virtual _operator_new(_name, _stage, _params)
	{
		_texPath = "data/textures/player_normal.png"; 
		AddAnimationWithSheet("normal_left", _texPath, 0, 2, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		AddAnimationWithSheet("normal_right", _texPath, 3, 5, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		AddAnimationWithSheet("normal_down", _texPath, 6, 8, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		AddAnimationWithSheet("normal_up", _texPath, 9, 9, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		AddAnimationWithSheetList("dead", _texPath, [0,9,3,8,0,9,3,8,10,11,12,13,14,15,16,17,18], 0, 0, 16, 16, -1, -1, -2, 0.15f);
		_texPath = "data/textures/player_cartepillar.png"; 
		AddAnimationWithSheet("cartepillar_left", _texPath, 0, 2, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		AddAnimationWithSheet("cartepillar_right", _texPath, 3, 5, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		AddAnimationWithSheet("cartepillar_down", _texPath, 6, 8, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		AddAnimationWithSheet("cartepillar_up", _texPath, 9, 9, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		_texPath = "data/textures/player_angry.png"; 
		AddAnimationWithSheet("angry_left", _texPath, 7, 9, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		AddAnimationWithSheet("angry_right", _texPath, 4, 6, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		AddAnimationWithSheet("angry_down", _texPath, 0, 2, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		AddAnimationWithSheet("angry_up", _texPath, 3, 3, 0, 0, 16, 16, -1, -1, -1, 0.25f);
		_texPath = "data/textures/player_hipo.png"; 
		_ani = AddAnimationWithSheet("hipo_left", _texPath, 8, 10, 0, 0, 22, 22, -1, -1, -1, 0.25f);
		SetAnimationOffset(_ani, 0, -4);
		_ani = AddAnimationWithSheet("hipo_right", _texPath, 5, 7, 0, 0, 22, 22, -1, -1, -1, 0.25f);
		SetAnimationOffset(_ani, 0, -4);
		_ani = AddAnimationWithSheet("hipo_down", _texPath, 0, 2, 0, 0, 22, 22, -1, -1, -1, 0.25f);
		SetAnimationOffset(_ani, 0, -4);
		_ani = AddAnimationWithSheet("hipo_up", _texPath, 3, 4, 0, 0, 22, 22, -1, -1, -1, 0.25f);
		SetAnimationOffset(_ani, 0, -4);
		_texPath = "data/textures/player_tank.png"; 
		_ani = AddAnimationWithSheet("tank_down_right", _texPath, 0, 0, 0, 0, 22, 22, -1, -1, -1, 0.25f);
		SetAnimationOffset(_ani, 0, -4);
		_ani = AddAnimationWithSheet("tank_down_left", _texPath, 1, 1, 0, 0, 22, 22, -1, -1, -1, 0.25f);
		SetAnimationOffset(_ani, 0, -4);
		_texPath = "data/textures/player_ship.png"; 
		_ani = AddAnimationWithSheet("ship_right", _texPath, 0, 0, 0, 0, 22, 22, -1, -1, -1, 0.25f);
		_ani = AddAnimationWithSheet("ship_left", _texPath, 1, 1, 0, 0, 22, 22, -1, -1, -1, 0.25f);
		
		sndPickupBall = NewObject("snd1"º, "gl_sound");
		sndPickupBall.Load("data/sounds/eat_ball.ogg");
		sndPickupItem = NewObject("snd2", "gl_sound");
		sndPickupItem.Load("data/sounds/pickup_item.ogg");
		sndDead = NewObject("snd3", "gl_sound");
		sndDead.Load("data/sounds/player_dead.ogg");
		sndItemWarning = NewObject("snd4", "gl_sound");
		sndItemWarning.Load("data/sounds/item_warning.ogg");
		sndUnlockBall = NewObject("snd5", "gl_sound");
		sndUnlockBall.Load("data/sounds/unlock_ball.ogg");
		sndShoot = NewObject("snd6", "gl_sound");
		sndShoot.Load("data/sounds/player_shot.ogg");
		sndDirection = NewObject("snd7", "gl_sound");
		sndDirection.Load("data/sounds/over_direction.ogg");
		
		shotList = [];
		shotList += [_stage.NewObject("shot", GetApp().GetBundleDriveName() + "player_shot")];
		shotList += [_stage.NewObject("shot", GetApp().GetBundleDriveName() + "player_shot")];
		shotList += [_stage.NewObject("shot", GetApp().GetBundleDriveName() + "player_shot")];
		shotList += [_stage.NewObject("shot", GetApp().GetBundleDriveName() + "player_shot")];
		for (i=0; i<sizeof(shotList); i++) 
		{
			shotList[i].SetStop(true);
		}
		
		SetCollisionRect(4, 4, GetWF()-8, GetHF()-8);
		
		SetType(ACTOR_TYPE_PLAYER);
		SetPriority(ACTOR_PRIORITY_PLAYER);
		SetMode("normal");
	}
	
	virtual Start()
	{
		DestroyAllFX();
		SetPos(spawnX, spawnY);              
		SetVisible(true);
		SetColliderMode(true, ACTOR_TYPE_ENEMIES | ACTOR_TYPE_HINGE);
		SetUserSpriteCollision(this, "OnSpriteCollision");
		if (mode != "cartepillar")
			SetMode("normal"); 
		SetDir("right");
		mapper = GetStage().FindObject("mapper1");
		_layer = mapper.GetLayer(0);
		_layer.AddSprite(this, true);
		pad = GetStage().FindObject("pad");
		hud = GetGL().FindObject("hud");
		//SetAnimation(mode + "_right");
		cellX = int(GetX());
		cellY = int(GetY());
		useControls = true;
		itemTimer = -2;
		GetStage().SetCameraPos(GetX()-256/2, GetY()-212/2+24);
		_change("loop");
	}
	
	function IsPadLeft()
	{
		return pad.IsButton(PAD_BUTTON_LEFT) || (pad.GetOffX() < 0);
	}
	
	function IsPadRight()
	{
		return pad.IsButton(PAD_BUTTON_RIGHT) || (pad.GetOffX() > 0);
	}

	function IsPadUp()
	{
		return pad.IsButton(PAD_BUTTON_UP) || (pad.GetOffY() < 0);
	}
	
	function IsPadDown()
	{
		return pad.IsButton(PAD_BUTTON_DOWN) || (pad.GetOffY() > 0);
	}

	function SetDir(_dir, _dist = 16)
	{
		curDir = _dir;
		switch (_dir)
		{
			case "up":		dx = 0; dy = -1; break;
			case "down":	dx = 0; dy = 1; break;
			case "left":	dx = -1; dy = 0; break;
			case "right":	dx = 1; dy = 0; break;
			default: 		dx = 0;	dy = 0; return;
		}
		SetAnimation(mode + "_" + _dir + aniPrefix);
		_cx = cellX;
		_cy = cellY;
		cellX = GetX() + dx * _dist;
		cellY = GetY() + dy * _dist;
		cellX = int(cellX/16)*16;
		cellY = int(cellY/16)*16;
		if (!useControls)
		{
			_layer = mapper.GetLayer(0);
			//Check the type of CELL where we are.
			_nfo = mapper.GetInfoFromPos(cellX, cellY);
			if (!CheckNextCell(_nfo))
			{
				dx = 0;
				dy = 0;
				cellX = _cx;
				cellY = _cy;
			}
		}
	}

	state "loop"
	{
#if	__DEVELOPER_MODE__
		if (Input_IsKeyPressed(KEY_ESCAPE))
		{
			GetApp().ClearStage();
			GetApp().RunMenu();
			return;
		}
		else if (Input_IsKeyPressed(KEY_0))
		{
			hud.StageCompleted();
			return;
		}
		else if (Input_IsKeyPressed(KEY_1))
		{
			GetStage().SetDebug(true);
		}
		else if (Input_IsKeyPressed(KEY_2))
		{
			GetStage().SetDebug(false);
		}
		else if (Input_IsKeyPressed(KEY_3))
		{
			itemTimer = 10.0f;
			sndPickupItem.Play();
			SetMode("angry");		
		}
#endif

		if (useControls)
		{
			if (IsPadRight())
			{
				SetDir("right");
			}
			else if (IsPadLeft())
			{
				SetDir("left");
			}
			else if (IsPadUp())
			{
				SetDir("up");
			}          
			else if (IsPadDown())
			{
				SetDir("down");
			}
			else
			{
				dx = 0;
				dy = 0;
			}
	
			if (dx || dy)
			{
				if ((dx < 0 && GetX() == 0))
					_nfo = mapper.GetInfoFromPos(31*16, GetY()+((dy <= 0) ? dy : 15+dy));
				else if ((dx > 0 && GetX() == 512-16))
					_nfo = mapper.GetInfoFromPos(0, GetY()+((dy <= 0) ? dy : 15+dy));
				else
					_nfo = mapper.GetInfoFromPos(GetX()+((dx <= 0) ? dx : 15+dx), GetY()+((dy <= 0) ? dy : 15+dy));
					
				if (CheckNextCell(_nfo)) // No-collision (0 = no collision, 1 = Collision for all, 2 = Collision only for player, 4 = Collision only for enemies)
				{
					useControls = false;
				}
				else
				{
					dx = 0;
					dy = 0;
				}
			}
		}
		
        aniSpeed = IncreaseValue(aniSpeed, (dx || dy) ? 1.0f : 0.0f, GetFTime() * 0.1f);
		SetAnimationSpeedFactor(aniSpeed);

		if (useControls == false)
		{
			IncPosTo(SPEED, SPEED, cellX, cellY);
		
			if (int(GetX()) == cellX && int(GetY()) == cellY)
			{
				if (cellX == 512) cellX = 0;
				else if (cellX == -16) cellX = 512-16;
				SetPos(cellX, cellY);
				useControls = true;
				_layer = mapper.GetLayer(0);
				//Check the type of CELL where we are.
				_nfo = mapper.GetInfoFromPos(cellX, cellY);
				if (_nfo[1] >= CELL_TYPE_BALL_S && _nfo[1] <= CELL_TYPE_BALL_E)
				{
					if (canPickupBalls)
					{
						_bi = _nfo[1] - CELL_TYPE_BALL_S;
						_layer.Set(int(cellX/16), int(cellY/16), _nfo[0], CELL_TYPE_FLOOR_S + _bi, _nfo[2]);
						sndPickupBall.Play();
						GetApp().OnPickupBall(this);
						hud.OnUpdateScore(100);
					}				
				}
				else if (_nfo[1] >= CELL_TYPE_BALLC_S && _nfo[1] <= CELL_TYPE_BALLC_E)
				{
					if (canUnlockBalls)
					{
						_bi = _nfo[1] - CELL_TYPE_BALLC_S;
						_layer.Set(int(cellX/16), int(cellY/16), _nfo[0], CELL_TYPE_BALL_S + _bi, _nfo[2]);
						sndUnlockBall.Play();
					}				
				}
				else if (_nfo[1] == CELL_TYPE_ITEM_ANGRY)
				{
					if (mode == "normal")
					{
						_layer.Set(int(cellX/16), int(cellY/16), _nfo[0], CELL_TYPE_FLOOR_S + 0, _nfo[2]);
						itemTimer = 1000.0f;
						sndPickupItem.Play();
						SetMode("angry");		
					}
				}
				else if (_nfo[1] == CELL_TYPE_ITEM_HIPO)
				{
					if (mode == "normal")
					{
						_layer.Set(int(cellX/16), int(cellY/16), _nfo[0], CELL_TYPE_FLOOR_S + 0, _nfo[2]);				
						itemTimer = 1000.0f;
						sndPickupItem.Play();
						SetMode("hipo");		
					}
				}
				else if (_nfo[1] == CELL_TYPE_ITEM_CARTEPILLAR)
				{
					if (mode == "normal")
					{
						_layer.Set(int(cellX/16), int(cellY/16), _nfo[0], CELL_TYPE_ITEM_NORMAL, _nfo[2]);
						sndPickupItem.Play();
						SetMode("cartepillar");
					}
				}
				else if (_nfo[1] == CELL_TYPE_ITEM_NORMAL)
				{
					if (mode == "cartepillar")
					{
						_layer.Set(int(cellX/16), int(cellY/16), _nfo[0], CELL_TYPE_ITEM_CARTEPILLAR, _nfo[2]);
						sndPickupItem.Play();
						SetMode("normal");
					}
				}
				else if (_nfo[1] == CELL_TYPE_UP)
				{
					if (canPickupBalls)
					{
						_layer.Set(int(cellX/16), int(cellY/16), _nfo[0], CELL_TYPE_FLOOR_S + 0, _nfo[2]);		
						useControls = false;
						SetDir("up");
						sndDirection.Play();
						GetApp().OnPickupBall(this);
						hud.OnUpdateScore(200);
					}
				}
				else if (_nfo[1] == CELL_TYPE_DOWN)
				{
					if (canPickupBalls)
					{
						_layer.Set(int(cellX/16), int(cellY/16), _nfo[0], CELL_TYPE_FLOOR_S + 0, _nfo[2]);		
						useControls = false;
						SetDir("down");
						sndDirection.Play();
						GetApp().OnPickupBall(this);
						hud.OnUpdateScore(200);
					}
				}
				else if (_nfo[1] == CELL_TYPE_LEFT)
				{
					if (canPickupBalls)
					{
						_layer.Set(int(cellX/16), int(cellY/16), _nfo[0], CELL_TYPE_FLOOR_S + 0, _nfo[2]);		
						useControls = false;
						SetDir("left");
						sndDirection.Play();
						GetApp().OnPickupBall(this);
						hud.OnUpdateScore(200);
					}
				}
				else if (_nfo[1] == CELL_TYPE_RIGHT)
				{
					if (canPickupBalls)
					{
						_layer.Set(int(cellX/16), int(cellY/16), _nfo[0], CELL_TYPE_FLOOR_S + 0, _nfo[2]);		
						useControls = false;
						SetDir("right");
						sndDirection.Play();
						GetApp().OnPickupBall(this);
						hud.OnUpdateScore(200);
					}
				}                                                                                   
				else if (_nfo[1] == CELL_TYPE_TANK)
				{
					if (mode == "normal" || mode == "tank")
					{
						useControls = false;
						SetDir("down");
						SetMode("tank");
					}
				}
				else if (_nfo[1] >= CELL_TYPE_SHIP_L && _nfo[1] <= CELL_TYPE_SHIP_R)
				{
					if (mode == "normal" || mode == "ship")
					{
						useControls = false;
						SetDir(curDir);
						SetMode("ship");
					}
				}
				else
				{
					if (mode == "tank" || mode == "ship")
						SetMode("normal");
				}
			}
		}
		
		if (useControls == false && canShot)
		{
			if (mode == "tank")
			{
				if (IsPadRight())
				{
					aniPrefix = "_right";
					SetDir(curDir);
				}
				else if (IsPadLeft())
				{
					aniPrefix = "_left";
					SetDir(curDir);
				}
			}
			else if (mode == "ship")
			{
				_nfo = mapper.GetInfoFromPos(cellX, cellY);
				if (_nfo[1] >= CELL_TYPE_SHIP_L && _nfo[1] <= CELL_TYPE_SHIP_R)
				{
					if (IsPadRight())
					{
						SetDir("right");
					}
					else if (IsPadLeft())
					{
						SetDir("left");
					}
				}
			}
			if (!pressBut1 && pad.IsButton(PAD_BUTTON_1))
			{
				pressBut1 = true;
				_ix = 0;
				for (i=0; i<sizeof(shotList); i++)
				{
					if (shotList[i].GetStop())
					{
						_x = GetX();
						if (mode == "tank")
						{
							shotList[i].SetPos(_x + (aniPrefix == "_right" ? 22 : 0), GetY()+4);
							shotList[i].dx = (aniPrefix == "_right") ? 2 : -2;
							shotList[i].dy = 0;
						}
						else if (mode == "ship")
						{
							shotList[i].SetPos(_x + 8, GetY());
							shotList[i].dy = -2;
							shotList[i].dx = 0;
						}
						shotList[i].ReStart();
						sndShoot.Play();
						break;
					}
				}
			}
			else if (!pad.IsButton(PAD_BUTTON_1))
			{
				pressBut1 = false;
			}
		}
		
		//------
		//CAMERA UPDATE
		//------
		_stage = GetStage();
		_stage.SetCameraPos(GetX()-256/2, GetY()-212/2+24);
		
		//----------
		//Time management for item duration
		//----------
		if (itemTimer == 0)
		{
			itemTimer = -1;
			_fx = CreateFX("blink");
			_fx.Start(100, 20);
			sndItemWarning.Play();
		}
		else if (itemTimer == -1)
		{
			if (GetFXCount() == 0) // FX completed??
			{
				itemTimer = -2;
				SetMode("normal");
				if (useControls)
				{
					//When item finish, refresh the cell
					useControls = false;
					cellX = GetX();
					cellY = GetY();
				}
			}
		}
		else if (itemTimer > 0)
		{
			itemTimer -= GetFTime();
			if (itemTimer <= 0) itemTimer = 0;
		}
	}
	
	function CheckNextCell(_nfo)
	{
		if ((_nfo[2] & 0x03) == 0)
		{
			if (_nfo[1] == CELL_TYPE_UP)
			{
				return ((canPickupBalls && curDir != "down") || !canPickupBalls);
			}
			else if (_nfo[1] == CELL_TYPE_DOWN)
			{
				return ((canPickupBalls && curDir != "up") || !canPickupBalls);
			}
			else if (_nfo[1] == CELL_TYPE_LEFT)
			{
				return ((canPickupBalls && curDir != "right") || !canPickupBalls);
			}
			else if (_nfo[1] == CELL_TYPE_RIGHT)
			{
				return ((canPickupBalls && curDir != "left") || !canPickupBalls);
			}
			else if (_nfo[1] >= CELL_TYPE_SHIP_L && _nfo[1] <= CELL_TYPE_TANK)
			{
				return (canUseShooter);
			}
			
			return true;
		}
		
		return !canTileCollide;                                                                                   
	}
	
	function OnSpriteCollision(_spr1, _spr2)
	{
		if (canUseHinges && _spr2.GetType() == ACTOR_TYPE_HINGE)
		{
			if (curDir == "right" && _spr2.IsLeft())
				_spr2.Swap();
			else if (curDir == "left" && !_spr2.IsLeft())
				_spr2.Swap();
		}
		else if (canKillEnemies)
		{
			if (_spr2.GetType() & canKillEnemies)
			{
				_spr2.Dead();
				GetApp().OnEnemyKilled(_spr2);
			}
			else if (_spr2.CanKill())
			{
				Dead();
			}
		}
		else
		{
			if (_spr2.CanKill())
			{
				Dead();
			}
		}
	}
	
	function SetMode(_mode)
	{
		if (mode == _mode)
		{
			SetDir(curDir);
			return;
		}
			
		aniPrefix = "";
		mode = _mode;
		switch (_mode)
		{
			case "normal":
			{
				canTileCollide = true;
				canKillEnemies = 0;
				canPickupBalls = true;
				canUnlockBalls = false;				
				canUseHinges = true;
				canShot = false;
				canUseShooter = true;
				GetStage().BroadcastToObjects ("OnPlayerNormal");
			}
			break;
			case "angry":
			{
				canTileCollide = true;
				canKillEnemies = ACTOR_TYPE_GHOST | ACTOR_TYPE_LADYBUG;
				canPickupBalls = true;
				canUnlockBalls = false;				
				canUseHinges = true;
				canShot = false;
				canUseShooter = false;
				GetStage().BroadcastToObjects ("OnPlayerAngry");
			}
			break;
			case "hipo":
			{
				canTileCollide = true;
				canKillEnemies = ACTOR_TYPE_GHOST | ACTOR_TYPE_LADYBUG | ACTOR_TYPE_TROLL;
				canPickupBalls = false;
				canUnlockBalls = false;				
				canUseHinges = true;
				canShot = false;
				canUseShooter = false;
				GetStage().BroadcastToObjects ("OnPlayerAngry");
			}
			break;
			case "cartepillar":
			{
				canTileCollide = true;
				canKillEnemies = 0;
				canPickupBalls = false;
				canUnlockBalls = true;				
				canUseHinges = true;
				canShot = false;
				canUseShooter = false;
				GetStage().BroadcastToObjects ("OnPlayerNormal");
			}
			break;
			case "tank":
			{
				canTileCollide = false;
				aniPrefix = "_right";
				canKillEnemies = 0;
				canPickupBalls = false;
				canUnlockBalls = false;				
				canUseHinges = false;
				canShot = true;
				canUseShooter = true;
				GetStage().BroadcastToObjects ("OnPlayerNormal");
			}
			break;
			case "ship":
			{
				canTileCollide = false;
				canKillEnemies = 0;
				canPickupBalls = false;
				canUnlockBalls = false;				
				canUseHinges = false;
				canShot = true;
				canUseShooter = true;
				GetStage().BroadcastToObjects ("OnPlayerNormal");
			}
			break;
		}
		SetDir(curDir);
	}
	
	function Dead()
	{
		DestroyAllFX();
		itemTimer = -2;
		SetColliderMode(false);
		sndDead.Play();
		SetAnimation("dead");
		_change("dead");
	}
	
	state "dead"
	{
		if (GetAnimationLoops() >= 1)
		{
			SetVisible(false);
			_change("dead2");
		}
	}
	
	state "dead2"
	{
		GetApp().OnPlayerKilled(this);
	}
}